version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: ${DB_NAME:-trading_system}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - db_user
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat /run/secrets/db_user)"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache with ACL
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
      --protected-mode yes
      --tcp-keepalive 300
      --timeout 300
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./config/redis/users.acl:/etc/redis/users.acl:ro
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # HashiCorp Vault for secrets management
  vault:
    image: vault:latest
    container_name: trading-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "${VAULT_PORT:-8200}:8200"
    volumes:
      - vault_data:/vault/data
      - vault_policies:/vault/policies
      - ./config/vault/config.json:/vault/config/config.json:ro
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # API Service with security hardening
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-1.0.0}
    container_name: trading-api
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/vault_token
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DB_NAME:-trading_system}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Security headers
      SECURE_HEADERS_ENABLED: "true"
      CORS_ALLOWED_ORIGINS: ${CORS_ORIGINS:-}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS:-}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./models:/app/models:rw
    secrets:
      - vault_token
      - jwt_secret
      - encryption_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # Run as nobody user

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    environment:
      GF_SECURITY_ADMIN_USER_FILE: /run/secrets/grafana_user
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: "true"
      GF_SECURITY_X_XSS_PROTECTION: "true"
      GF_AUTH_BASIC_ENABLED: "false"
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    secrets:
      - grafana_user
      - grafana_password
    depends_on:
      - prometheus
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # Run as grafana user

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: trading-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "6831:6831/udp"  # Jaeger agent
      - "6832:6832/udp"  # Jaeger agent
      - "5778:5778"      # Config
      - "16686:16686"    # Web UI
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
      - "14250:14250"    # gRPC
      - "14268:14268"    # HTTP
      - "9411:9411"      # Zipkin
    networks:
      - trading-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

# Docker secrets (for production use Docker Swarm or external secret management)
secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  vault_token:
    file: ./secrets/vault_token.txt
  grafana_user:
    file: ./secrets/grafana_user.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  encryption_key:
    file: ./secrets/encryption_key.txt

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  vault_data:
    driver: local
  vault_policies:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-trading
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"