# Development Infrastructure - Docker Compose
# Modified for development environment without server-specific volume mounts

networks:
  trading-frontend:
    driver: bridge
  trading-backend:
    driver: bridge
    internal: true
  trading-data:
    driver: bridge
    internal: true

volumes:
  # Development volumes (Docker managed)
  redis-data:
  questdb-data:
  prometheus-data:
  grafana-data:
  pulsar-data:

services:
  # Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: trading-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.api.address=:8080"
      - "--metrics.prometheus=true"
      - "--log.level=INFO"
    ports:
      - "8080:80"      # HTTP
      - "8443:443"     # HTTPS  
      - "8081:8080"    # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - trading-frontend
      - trading-backend

  # Redis - Hot data cache and session store
  redis:
    image: redis/redis-stack-server:7.2.0-v6
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_ARGS=--maxmemory 2gb --maxmemory-policy allkeys-lru --save 900 1 --appendonly yes
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # QuestDB - Time-series database for market data
  questdb:
    image: questdb/questdb:7.3.2
    container_name: trading-questdb
    restart: unless-stopped
    ports:
      - "9000:9000"    # HTTP console
      - "8812:8812"    # Postgres wire protocol
      - "9009:9009"    # InfluxDB line protocol
    environment:
      - QDB_PG_USER=questdb
      - QDB_PG_PASSWORD=trading123
      - JAVA_OPTS=-Xms512m -Xmx2g
    volumes:
      - questdb-data:/root/.questdb
    networks:
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=5GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - trading-backend
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: trading-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    networks:
      - trading-backend

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: trading-cadvisor
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    networks:
      - trading-backend

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: trading-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - trading-backend

  # Apache Pulsar - Message streaming
  pulsar:
    image: apachepulsar/pulsar:3.2.0
    container_name: trading-pulsar
    restart: unless-stopped
    ports:
      - "6650:6650"    # Pulsar binary protocol
      - "8083:8080"    # Pulsar admin REST API
    command: bin/pulsar standalone
    environment:
      - PULSAR_MEM="-Xms1g -Xmx2g -XX:MaxDirectMemorySize=1g"
      - PULSAR_GC="-XX:+UseG1GC"
    volumes:
      - pulsar-data:/pulsar/data
    networks:
      - trading-backend
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Promtail - Log collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: trading-promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - trading-backend