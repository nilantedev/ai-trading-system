# Production Infrastructure Services - Docker Compose
# Server Deployment Configuration for main-nilante.com
# Optimized for server storage layout with proper security and performance

# Networks for service isolation
networks:
  trading-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  trading-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  trading-data:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16

# Production volumes using server deployment paths
volumes:
  # Hot data - Redis on primary NVMe (/srv/) for application runtime
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /srv/trading/redis
  
  # Time-series data - QuestDB on dedicated fast NVMe (/mnt/fastdrive/)
  questdb-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/fastdrive/trading/questdb
      
  # Monitoring stack on dedicated fast NVMe (/mnt/fastdrive/)
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/fastdrive/trading/prometheus
      
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/fastdrive/trading/grafana
  
  # Message streaming - Pulsar on fast storage (/mnt/fastdrive/)
  pulsar-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/fastdrive/trading/pulsar
  
  # AI Models - Weaviate and model cache on fast storage (/mnt/fastdrive/)
  weaviate-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/fastdrive/trading/weaviate
      
  # Large file storage - MinIO on bulk HDD (/mnt/bulkdata/)
  minio-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/bulkdata/trading/minio
      
  # Backups and archives on bulk HDD (/mnt/bulkdata/)
  backup-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/bulkdata/trading/backups

services:
  # Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: trading-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.api.address=:8082"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL:-admin@main-nilante.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"        # HTTP
      - "443:443"      # HTTPS  
      - "8082:8082"    # API  
      - "8081:8080"    # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/trading/config/traefik:/etc/traefik
      - /srv/trading/config/letsencrypt:/letsencrypt
    networks:
      - trading-frontend
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '2'  
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"

  # Redis - Hot data cache and session store
  redis:
    image: redis/redis-stack-server:7.2.0-v6
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    environment:
      - REDIS_ARGS=--maxmemory ${REDIS_MAX_MEMORY:-16gb} --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru} --save 900 1 --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD environment variable is required}
    volumes:
      - redis-data:/data
      - /srv/trading/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 20G
        reservations:
          cpus: '4'
          memory: 16G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    sysctls:
      - net.core.somaxconn=65535
    labels:
      - "traefik.enable=false"

  # QuestDB - Time-series database for market data
  questdb:
    image: questdb/questdb:7.3.2
    container_name: trading-questdb
    restart: unless-stopped
    ports:
      - "127.0.0.1:9000:9000"    # HTTP console (localhost only)
      - "127.0.0.1:8812:8812"    # Postgres wire protocol (localhost only)
      - "127.0.0.1:9009:9009"    # InfluxDB line protocol (localhost only)
    volumes:
      - questdb-data:/root/.questdb
    networks:
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '12'
          memory: 32G
        reservations:
          cpus: '6'
          memory: 16G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.questdb.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/questdb`)"
      - "traefik.http.routers.questdb.entrypoints=websecure"
      - "traefik.http.routers.questdb.tls.certresolver=letsencrypt"
      - "traefik.http.services.questdb.loadbalancer.server.port=9000"

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"  # Localhost only
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - /srv/trading/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /srv/trading/config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - trading-backend
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"  # Localhost only
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:?GRAFANA_PASSWORD environment variable is required}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=redis-datasource,questdb-questdb-datasource
      - GF_SERVER_ROOT_URL=https://trading.main-nilante.com/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana-data:/var/lib/grafana
      - /srv/trading/config/grafana/provisioning:/etc/grafana/provisioning:ro
      - /srv/trading/config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Apache Pulsar - Message streaming (critical component)
  pulsar:
    image: apachepulsar/pulsar:3.2.0
    container_name: trading-pulsar
    restart: unless-stopped
    ports:
      - "127.0.0.1:6650:6650"    # Pulsar binary protocol (localhost only)
      - "127.0.0.1:8083:8080"    # Pulsar admin REST API (localhost only)
    command: bin/pulsar standalone
    environment:
      - PULSAR_MEM="-Xms4g -Xmx16g -XX:MaxDirectMemorySize=8g"
      - PULSAR_GC="-XX:+UseG1GC"
    volumes:
      - pulsar-data:/pulsar/data
      - /srv/trading/config/pulsar:/pulsar/conf:ro
    networks:
      - trading-backend
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 20G
        reservations:
          cpus: '4'
          memory: 16G
    healthcheck:
      test: ["CMD", "bin/pulsar-admin", "brokers", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pulsar.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/pulsar`)"
      - "traefik.http.routers.pulsar.entrypoints=websecure"
      - "traefik.http.routers.pulsar.tls.certresolver=letsencrypt"
      - "traefik.http.services.pulsar.loadbalancer.server.port=8080"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: trading-node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"  # Localhost only
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    networks:
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=false"

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: trading-cadvisor
    restart: unless-stopped
    ports:
      - "127.0.0.1:8084:8080"  # Changed port to avoid conflicts, localhost only
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    networks:
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    labels:
      - "traefik.enable=false"

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: trading-loki
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"  # Localhost only
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /srv/trading/config/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - /srv/trading/logs:/var/log/trading:ro
    networks:
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    labels:
      - "traefik.enable=false"

  # Promtail - Log collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: trading-promtail
    restart: unless-stopped
    volumes:
      - /srv/trading/config/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /srv/trading/logs:/var/log/trading:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - trading-backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=false"

  # Weaviate - Vector database for AI/RAG operations
  weaviate:
    image: semitechnologies/weaviate:1.24.1
    container_name: trading-weaviate
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"    # HTTP API (localhost only)
      - "127.0.0.1:50051:50051"  # gRPC (localhost only)
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false}
      - AUTHENTICATION_APIKEY_ENABLED=${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true}
      - AUTHENTICATION_APIKEY_ALLOWED_KEYS=${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:?WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS environment variable is required}
      - AUTHENTICATION_APIKEY_USERS=${WEAVIATE_AUTHENTICATION_APIKEY_USERS:-admin}
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=weaviate-node1
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '4'
          memory: 8G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weaviate.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/weaviate`)"
      - "traefik.http.routers.weaviate.entrypoints=websecure"
      - "traefik.http.routers.weaviate.tls.certresolver=letsencrypt"
      - "traefik.http.services.weaviate.loadbalancer.server.port=8080"

  # MinIO - Object storage for model artifacts and large files
  minio:
    image: minio/minio:RELEASE.2024-02-17T01-15-57Z
    container_name: trading-minio
    restart: unless-stopped
    ports:
      - "127.0.0.1:9001:9000"    # API (localhost only)
      - "127.0.0.1:9002:9001"    # Console (localhost only)
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:?MINIO_ROOT_USER environment variable is required}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:?MINIO_ROOT_PASSWORD environment variable is required}
      - MINIO_BROWSER_REDIRECT_URL=https://trading.main-nilante.com/minio
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - trading-data
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`trading.main-nilante.com`) && PathPrefix(`/minio`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"