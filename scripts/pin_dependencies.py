#!/usr/bin/env python3
"""
Script to pin dependencies and generate lock files for AI Trading System.
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def generate_requirements_lock():
    """Generate pinned requirements lock file."""
    logger.info("📦 Generating requirements lock file...")
    
    project_root = Path(__file__).parent.parent
    requirements_file = project_root / "requirements.txt" 
    requirements_lock = project_root / "requirements-lock.txt"
    
    if not requirements_file.exists():
        logger.error("requirements.txt not found!")
        return False
    
    try:
        # Install pip-tools if not available
        subprocess.run([
            sys.executable, "-m", "pip", "install", "pip-tools"
        ], check=True, capture_output=True)
        
        # Generate lock file
        result = subprocess.run([
            sys.executable, "-m", "piptools", "compile",
            "--output-file", str(requirements_lock),
            "--verbose",
            "--generate-hashes",  # Generate hashes for security
            "--allow-unsafe",     # Include pip, setuptools, etc.
            str(requirements_file)
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"✅ Generated pinned requirements: {requirements_lock}")
            
            # Add header with generation info
            with open(requirements_lock, 'r') as f:
                content = f.read()
            
            header = f"""#
# This file is autogenerated by pip-compile with python {sys.version_info.major}.{sys.version_info.minor}
# To update, run:
#
#    pip-compile --generate-hashes --allow-unsafe requirements.txt
#
# Generated on: {datetime.utcnow().isoformat()}
#
"""
            
            with open(requirements_lock, 'w') as f:
                f.write(header + content)
                
            return True
        else:
            logger.error(f"Failed to generate requirements lock: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"Error generating requirements lock: {e}")
        return False


def generate_dev_requirements_lock():
    """Generate pinned dev requirements lock file."""
    logger.info("📦 Generating dev requirements lock file...")
    
    project_root = Path(__file__).parent.parent
    dev_requirements = project_root / "requirements-dev.txt"
    dev_lock = project_root / "requirements-dev-lock.txt"
    
    if not dev_requirements.exists():
        logger.warning("requirements-dev.txt not found, skipping dev lock file")
        return True
    
    try:
        result = subprocess.run([
            sys.executable, "-m", "piptools", "compile", 
            "--output-file", str(dev_lock),
            "--verbose",
            "--generate-hashes",
            "--allow-unsafe",
            str(dev_requirements)
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"✅ Generated dev requirements lock: {dev_lock}")
            return True
        else:
            logger.error(f"Failed to generate dev requirements lock: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"Error generating dev requirements lock: {e}")
        return False


def create_sbom():
    """Create Software Bill of Materials (SBOM)."""
    logger.info("📋 Creating Software Bill of Materials...")
    
    project_root = Path(__file__).parent.parent
    sbom_file = project_root / "sbom.json"
    
    try:
        # Generate SBOM using pip-audit
        subprocess.run([
            sys.executable, "-m", "pip", "install", "pip-audit"
        ], check=True, capture_output=True)
        
        result = subprocess.run([
            sys.executable, "-m", "pip_audit",
            "--format", "cyclonedx-json",
            "--output", str(sbom_file)
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"✅ Generated SBOM: {sbom_file}")
            return True
        else:
            logger.warning(f"SBOM generation completed with warnings: {result.stderr}")
            return True  # Often succeeds but with warnings
            
    except Exception as e:
        logger.error(f"Error generating SBOM: {e}")
        return False


def pin_docker_base_images():
    """Pin Docker base images to specific digests."""
    logger.info("🐳 Pinning Docker base images...")
    
    project_root = Path(__file__).parent.parent
    dockerfile_paths = [
        project_root / "Dockerfile",
        project_root / "docker" / "Dockerfile",
        project_root / "infrastructure" / "docker" / "Dockerfile"
    ]
    
    pinned_any = False
    
    for dockerfile_path in dockerfile_paths:
        if not dockerfile_path.exists():
            continue
            
        try:
            with open(dockerfile_path, 'r') as f:
                lines = f.readlines()
            
            updated_lines = []
            updated = False
            
            for line in lines:
                if line.strip().startswith("FROM ") and "@sha256:" not in line:
                    # Extract image name
                    from_line = line.strip()
                    parts = from_line.split()
                    if len(parts) >= 2:
                        image = parts[1]
                        
                        # Skip if it's a multi-stage build reference
                        if " as " in from_line.lower():
                            image = image.split()[0]
                        
                        logger.info(f"Checking digest for {image}...")
                        
                        # Get image digest
                        try:
                            digest_result = subprocess.run([
                                "docker", "inspect", "--format",
                                "{{index .RepoDigests 0}}", image
                            ], capture_output=True, text=True)
                            
                            if digest_result.returncode == 0 and digest_result.stdout.strip():
                                digest_ref = digest_result.stdout.strip()
                                if "@sha256:" in digest_ref:
                                    # Update the line
                                    updated_line = from_line.replace(image, digest_ref) + "\n"
                                    updated_lines.append(updated_line)
                                    updated = True
                                    logger.info(f"  Pinned {image} to {digest_ref}")
                                else:
                                    updated_lines.append(line)
                            else:
                                logger.warning(f"  Could not get digest for {image}")
                                updated_lines.append(line)
                                
                        except Exception as e:
                            logger.warning(f"  Error getting digest for {image}: {e}")
                            updated_lines.append(line)
                else:
                    updated_lines.append(line)
            
            if updated:
                # Write back the updated Dockerfile
                with open(dockerfile_path, 'w') as f:
                    f.writelines(updated_lines)
                logger.info(f"✅ Updated {dockerfile_path}")
                pinned_any = True
            else:
                logger.info(f"  No updates needed for {dockerfile_path}")
                
        except Exception as e:
            logger.error(f"Error processing {dockerfile_path}: {e}")
    
    if not pinned_any:
        logger.info("No Docker files found or no images to pin")
    
    return True


def create_dependency_update_script():
    """Create script for updating dependencies safely."""
    logger.info("📝 Creating dependency update script...")
    
    project_root = Path(__file__).parent.parent
    update_script = project_root / "scripts" / "update_dependencies.sh"
    
    script_content = """#!/bin/bash
# Dependency update script for AI Trading System
set -e

echo "🔄 Updating dependencies safely..."

# Backup current lock files
echo "📦 Backing up current lock files..."
cp requirements-lock.txt requirements-lock.txt.backup || true
cp requirements-dev-lock.txt requirements-dev-lock.txt.backup || true

# Update lock files
echo "🔒 Generating new lock files..."
python scripts/pin_dependencies.py

# Run security scan
echo "🔒 Running security scan on new dependencies..."
python scripts/security_scan_local.py

# Run tests
echo "🧪 Running tests with new dependencies..."
if command -v pytest &> /dev/null; then
    pytest tests/ || {
        echo "❌ Tests failed with new dependencies, rolling back..."
        cp requirements-lock.txt.backup requirements-lock.txt || true
        cp requirements-dev-lock.txt.backup requirements-dev-lock.txt || true
        exit 1
    }
else
    echo "⚠️  pytest not found, skipping test run"
fi

echo "✅ Dependencies updated successfully!"
echo "📝 Review the changes and commit if everything looks good"
"""
    
    with open(update_script, 'w') as f:
        f.write(script_content)
    
    os.chmod(update_script, 0o755)
    logger.info(f"✅ Created dependency update script: {update_script}")
    
    return True


def main():
    """Main function."""
    logger.info("🔧 Starting dependency pinning process...")
    
    success = True
    
    # Generate requirements lock files
    if not generate_requirements_lock():
        success = False
    
    # Generate dev requirements lock file
    if not generate_dev_requirements_lock():
        success = False
    
    # Create SBOM
    if not create_sbom():
        success = False
    
    # Pin Docker images
    if not pin_docker_base_images():
        success = False
    
    # Create update script
    if not create_dependency_update_script():
        success = False
    
    if success:
        logger.info("🎉 Dependency pinning completed successfully!")
        print("\n" + "="*60)
        print("🔒 DEPENDENCY PINNING COMPLETE")
        print("="*60)
        print("✅ Generated requirements-lock.txt with hashes")
        print("✅ Generated SBOM (Software Bill of Materials)")
        print("✅ Pinned Docker base images (if Dockerfiles found)")
        print("✅ Created dependency update script")
        print("\n📝 Next steps:")
        print("  1. Review the generated lock files")
        print("  2. Commit the lock files to version control")
        print("  3. Use 'pip install -r requirements-lock.txt' in production")
        print("  4. Run './scripts/update_dependencies.sh' to safely update")
        print("="*60)
        return 0
    else:
        logger.error("❌ Some dependency pinning operations failed")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)