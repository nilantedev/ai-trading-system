[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-trading-system"
version = "3.0.0-production"
description = "Enterprise AI-powered options trading system with compliance and disaster recovery"
authors = [
    {name = "Nilante Dev", email = "admin@main-nilante.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: FastAPI",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    "psycopg[binary,pool]>=3.1.0",
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.90.0",
    "black>=23.10.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "structlog>=23.2.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-prometheus>=1.12.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "polars>=0.19.0",
    "pyarrow>=14.0.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "watchdog>=3.0.0",
]

ai = [
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "tokenizers>=0.15.0",
    "sentence-transformers>=2.2.0",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "langchain>=0.0.340",
    "langchain-community>=0.0.0",
    "chromadb>=0.4.0",
    "weaviate-client>=3.25.0",
]

trading = [
    "alpaca-trade-api>=3.0.0",
    "polygon-api-client>=1.12.0",
    "yfinance>=0.2.0",
    "ta-lib>=0.4.0",
    "ccxt>=4.1.0",
    "python-binance>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/nilantedev/ai-trading-system"
Repository = "https://github.com/nilantedev/ai-trading-system.git"
Documentation = "https://github.com/nilantedev/ai-trading-system/docs"
"Bug Tracker" = "https://github.com/nilantedev/ai-trading-system/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["shared*", "services*", "tools*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["trading_common", "services"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alpaca_trade_api.*",
    "polygon.*",
    "ccxt.*",
    "ta.*",
    "redis.*",
    "weaviate.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Internal monorepo-style package that may not be installed in editable mode in all environments yet
module = [
    "trading_common.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config --cov=shared --cov=services --cov-report=html --cov-report=term-missing --cov-branch --asyncio-mode=auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "property: marks tests as property-based tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["shared", "services"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
# Enforce coverage thresholds - fail build if below these levels
fail_under = 70
precision = 1
show_missing = true

[tool.flake8]
max-line-length = 100
extend-ignore = [
    # Handled by black
    "E203",
]
# Per-file ignores must be provided as a list of strings in TOML for flake8.
# The previous inline table syntax was invalid TOML and broke pyproject parsing.
per-file-ignores = [
    # Intentional phased startup/shutdown broad exception handling with inline justifications
    "api/main.py:BLE001",
]