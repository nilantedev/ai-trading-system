name: Security Vulnerability Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep pip-audit
          
      - name: Install project dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Run Safety (PyPI vulnerability database)
        run: |
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true
          
      - name: Run pip-audit (Alternative vulnerability scanner)
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx-json --output=sbom.json || true
          
      - name: Upload Safety Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safety-reports
          path: |
            safety-report.json
            safety-report.txt
            pip-audit-report.json
            sbom.json
            
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
          
      - name: Run Bandit (Python security linter)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt -o bandit-report.txt || true
          
      - name: Run Semgrep (Static analysis)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto --output=semgrep-report.txt . || true
          
      - name: Upload Code Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-security-reports
          path: |
            bandit-report.json
            bandit-report.txt
            semgrep-report.json
            semgrep-report.txt
            
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t trading-system:latest .
          else
            echo "Dockerfile not found, skipping Docker security scan"
            exit 0
          fi
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trading-system:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run TruffleHog (Secrets detection)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Security Summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Date: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Dependency Vulnerabilities" >> security-summary.md
          if [ -f safety-reports/safety-report.txt ]; then
            echo "### Safety Report" >> security-summary.md
            echo '```' >> security-summary.md
            cat safety-reports/safety-report.txt >> security-summary.md
            echo '```' >> security-summary.md
          fi
          
          echo "## Code Security Issues" >> security-summary.md
          if [ -f code-security-reports/bandit-report.txt ]; then
            echo "### Bandit Report" >> security-summary.md
            echo '```' >> security-summary.md
            tail -20 code-security-reports/bandit-report.txt >> security-summary.md
            echo '```' >> security-summary.md
          fi
          
          echo "## Recommendations" >> security-summary.md
          echo "1. Review and fix high-severity vulnerabilities immediately" >> security-summary.md
          echo "2. Update vulnerable dependencies to secure versions" >> security-summary.md
          echo "3. Address code security issues flagged by static analysis" >> security-summary.md
          echo "4. Ensure no secrets are committed to the repository" >> security-summary.md
          
      - name: Upload Security Summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ”’ Security Scan Results\n\n${summary}`
              });
            }